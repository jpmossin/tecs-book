// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

// Follows the suggested implementation in the book
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// --- A register related.
	Not(in=instruction[15], out=aInst);
	// Can load either the alu output or A-instruction constant value.
	Mux16(sel=aInst, a=aluOut, b=instruction, out=aIn);
	// load A = a-instruction or store aluOut in A
	Or(a=aInst, b=instruction[5], out=loadA);
	ARegister(in=aIn, load=loadA, out=a);

	// --- D register related
	And(a=instruction[4], b=instruction[15], out=loadD);
	DRegister(in=aluOut, load=loadD, out=d);

	// --- ALU related
	Mux16(sel=instruction[12], a=a, b=inM, out=y);
	ALU(x=d, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9],
				  ny=instruction[8], f=instruction[7], no=instruction[6],
				  out=aluOut, zr=aluZr, ng=aluNg);

	// --- PC related
	// Check if jump condition is satisfied
	Or(a=aluNg, b=aluZr, out=aluNegZr);
	Not(in=aluNegZr, out=aluGt);
	And(a=instruction[0], b=aluGt, out=jgt);
	And(a=instruction[1], b=aluZr, out=jeq);
	And(a=instruction[2], b=aluNg, out=jlt);
	And(a=aluGt, b=aluZr, out=jmp0);
	And(a=jmp0, b=aluNg, out=jmp);
	Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jlt, in[3]=jmp, out=jmpOr);
	And(a=jmpOr, b=instruction[15], out=loadPC);

	PC(in=a, reset=reset, load=loadPC, inc=true, out[0..14]=pc);

	// --- Out related
	And16(a=true, b=a, out[0..14]=addressM);
	And16(a=true, b=aluOut, out=outM);
	And(a=instruction[15], b=instruction[3], out=writeM);
}
